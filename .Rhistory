}
#Set up standard deviation of proposal distribution
Sig <- c(0.01, 0.05)
TNC1 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(0,1))
TNC2 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TNC3 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TNC4 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
plot(TNC1[,1], TNC1[,2], xlim = c(-0.5, 1), ylim = c(-0.5,1.5), ty = "l", col = "red")
lines(TNC2[,1], TNC2[,2], col = "blue")
lines(TNC3[,1], TNC3[,2], col = "green")
lines(TNC4[,1], TNC4[,2], col = "orange")
TP751 <- MHmcmc(Sig, LLH, P75, steps = 4000, target = 0.2, startValue = c(0,1))
TP752 <- MHmcmc(Sig, LLH, P75, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TP753 <- MHmcmc(Sig, LLH, P75, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TP754 <- MHmcmc(Sig, LLH, P75, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
plot(TP751[,1], TP751[,2], xlim = c(-0.5, 1), ylim = c(-0.5,1.5), ty = "l", col = "red")
lines(TP752[,1], TP752[,2], col = "blue")
lines(TP753[,1], TP753[,2], col = "green")
lines(TP754[,1], TP754[,2], col = "orange")
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(100, nrow(TNC1), by = 100)
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])
GRx[i] <- tmp$R
}
plot(Xval, GRx, ty = "l", xlim = c(0,4000))
par(mfrow = c(1, 2), pty = "s")
h1 <- density(c(TNC1[2000:4000,1], TNC2[2000:4000,1], TNC3[2000:4000,1], TNC4[2000:4000,1]))
ymax <- max(c(h1$y)) * 1.05
plot(h1$x, h1$y, type = "l", col = "black", xlim = range(-0.5,0.5),
ylim = c(0, ymax), main = "Posterior Slope",
xlab = "x", ylab = "Density")
h1 <- density(c(TNC1[2000:4000,2], TNC2[2000:4000,2], TNC3[2000:4000,2], TNC4[2000:4000,2]))
ymax <- max(c(h1$y)) * 1.05
plot(h1$x, h1$y, type = "l", col = "black", xlim = range(0.5,1.5),
ylim = c(0, ymax), main = "Posterior Intercept",
xlab = "x", ylab = "Density")
View(h1)
View(slope)
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(100, nrow(TNC1), by = 100)
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])
GRx[i] <- tmp$R
}
plot(Xval, GRx, ty = "l", xlim = c(0,4000))
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(0, nrow(TNC1), by = 100)
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])
GRx[i] <- tmp$R
}
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(1, nrow(TNC1), by = 100)
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])
GRx[i] <- tmp$R
}
plot(Xval, GRx, ty = "l", xlim = c(0,4000))
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(10, nrow(TNC1), by = 100)
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])
GRx[i] <- tmp$R
}
plot(Xval, GRx, ty = "l", xlim = c(0,4000))
slope <- cbind(TNC1[,1], TNC2[,1], TNC3[,1], TNC4[,1])
Xval <- seq(100, nrow(TNC1), by = 100)  #GelmanRubin(slope[1:Xval[i], ]) There must be at least 100 observations from each chain
GRx <- rep(0, length(Xval))
for (i in 1:length(Xval)){
tmp <- GelmanRubin(slope[1:Xval[i],])#GelmanRubin(slope[1:Xval[i], ]) There must be at least 100 observations from each chain
GRx[i] <- tmp$R
}
plot(Xval, GRx, ty = "l", xlim = c(0,4000))
# This is my new R script
rm(list = ls())
library(Bolstad2)
MHmcmc <- function(sigma, posterior, data, steps = 1000, target = 0.2, randomSeed = NULL, startValue = NULL)
{
if (steps < 100) {
warning("Function should take at least 100 steps")
}
#determine number of parameter dimensions
np <- length(sigma)
if (any(sigma <= 0))
stop("All standard deviations must be strictly non-zero and positive")
targetSample <- matrix(rep(0, (np+1)*steps), nrow = steps, byrow = TRUE)
if (!is.null(randomSeed))
set.seed(randomSeed)
z <- rnorm(steps, 0, sigma[1])
for (n in 2:np){
z <- cbind(z, rnorm(steps, 0, sigma[n]))
}
u <- runif(steps)
if (is.null(startValue))
startValue <- z[1,]
i1 <- 1
nstep = 1
accept = 1
af <- accept/nstep
targetSample[1,] <- c(startValue, af)
g <- rep(0, steps)
proposal <- matrix(rep(0, np*steps), nrow = steps, byrow = TRUE)
alpha <- rep(0, steps)
g[1] <- posterior(targetSample[1,c(1:np)], data)
for (n in 2:steps) {
proposal[n,] <- targetSample[i1,c(1:np)] + z[n,]
g[n] <- posterior(proposal[n,], data)
k3 <- g[n]
k4 <- g[i1]
alpha[n] <- ifelse(k3/k4 > 1, 1, k3/k4)
if (u[n] >= alpha[n]) {
targetSample[n,] <- targetSample[i1,]
}
else {
targetSample[n,] <- c(proposal[n,], af)
i1 <- n
accept <- accept + 1
}
if (nstep >= 200){
af <- accept/nstep
if (af > target){
z <- z * 1.1
} else if (af < target){
z <- z * 0.9
}
nstep = 0
accept = 0
} else {
nstep = nstep + 1
}
}
oldPar <- par(mfrow = c(2, 2), pty = "s")
h <- density(targetSample[,1])
ymax <- max(c(h$y)) * 1.05
plot(h$x, h$y, type = "l", col = "light blue", xlim = range(targetSample[,1]),
ylim = c(0, ymax), main = "Posterior Parameter 1",
xlab = "x", ylab = "Density")
h <- hist(targetSample[,2], plot = FALSE)
ymax <- max(c(h$density)) * 1.05
hist(targetSample[,2], prob = TRUE, col = "light blue", xlim = range(targetSample[,2]),
ylim = c(0, ymax), main = "Posterior Parameter 2",
xlab = "x", ylab = "Density")
box()
plot(targetSample[,1], type = "l", main = "", ylab = "Target 1 Sample")
plot(targetSample[,2], type = "l", main = "", ylab = "Target 2 Sample")
par(oldPar)
invisible(targetSample)
}
# This is my new R script
rm(list = ls())
library(Bolstad2)
MHmcmc <- function(sigma, posterior, data, steps = 1000, target = 0.2, randomSeed = NULL, startValue = NULL)
{
if (steps < 100) {
warning("Function should take at least 100 steps")
}
#determine number of parameter dimensions
np <- length(sigma)
if (any(sigma <= 0))
stop("All standard deviations must be strictly non-zero and positive")
targetSample <- matrix(rep(0, (np+1)*steps), nrow = steps, byrow = TRUE)
if (!is.null(randomSeed))
set.seed(randomSeed)
z <- rnorm(steps, 0, sigma[1])
for (n in 2:np){
z <- cbind(z, rnorm(steps, 0, sigma[n]))
}
u <- runif(steps)
if (is.null(startValue))
startValue <- z[1,]
i1 <- 1
nstep = 1
accept = 1
af <- accept/nstep
targetSample[1,] <- c(startValue, af)
g <- rep(0, steps)
proposal <- matrix(rep(0, np*steps), nrow = steps, byrow = TRUE)
alpha <- rep(0, steps)
g[1] <- posterior(targetSample[1,c(1:np)], data)
for (n in 2:steps) {
proposal[n,] <- targetSample[i1,c(1:np)] + z[n,]
g[n] <- posterior(proposal[n,], data)
k3 <- g[n]
k4 <- g[i1]
alpha[n] <- ifelse(k3/k4 > 1, 1, k3/k4)
if (u[n] >= alpha[n]) {
targetSample[n,] <- targetSample[i1,]
}
else {
targetSample[n,] <- c(proposal[n,], af)
i1 <- n
accept <- accept + 1
}
if (nstep >= 200){
af <- accept/nstep
if (af > target){
z <- z * 1.1
} else if (af < target){
z <- z * 0.9
}
nstep = 0
accept = 0
} else {
nstep = nstep + 1
}
}
oldPar <- par(mfrow = c(2, 2), pty = "s")
h <- density(targetSample[,1])
ymax <- max(c(h$y)) * 1.05
plot(h$x, h$y, type = "l", col = "light blue", xlim = range(targetSample[,1]),
ylim = c(0, ymax), main = "Posterior Parameter 1",
xlab = "x", ylab = "Density")
h <- hist(targetSample[,2], plot = FALSE)
ymax <- max(c(h$density)) * 1.05
hist(targetSample[,2], prob = TRUE, col = "light blue", xlim = range(targetSample[,2]),
ylim = c(0, ymax), main = "Posterior Parameter 2",
xlab = "x", ylab = "Density")
box()
plot(targetSample[,1], type = "l", main = "", ylab = "Target 1 Sample")
plot(targetSample[,2], type = "l", main = "", ylab = "Target 2 Sample")
par(oldPar)
invisible(targetSample)
}
#Define data points
NC <- matrix(c(2,  0.988850026,  2,	1.021569338, 2,	0.989580636, 4,	0.853398211, 4,	0.853895625, 4,	1.28523392, 4,	1.007472244,
10,	1.262924495, 10,	0.997538414, 10,	1.105481178, 10,	0.731030243, 10,	0.90302567), nrow = 12, byrow = TRUE)
plot(NC[,1], NC[,2], ylim = c(0.5, 6), ty = "p", col = "red")
#Likelihood evaluation
LLH <- function(theta, data){
Yhat <- theta[1] * data[,1] + theta[2]
SSE <- sum((data[,2] - Yhat)^2)
post <- SSE^(-nrow(data)/2)
return(post)
}
#Set up standard deviation of proposal distribution
Sig <- c(0.01, 0.05)
# MCMC with different start point
TNC1 <- MHmcmc(sigma= Sig, posterior= LLH, data= NC, steps = 4000, target = 0.2, startValue = c(0,1))
TNC2 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TNC2 <- MHmcmc(sigma= Sig, posterior= LLH, data= NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TNC2 <- MHmcmc(Sig, LLH, NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
TNC22 <- MHmcmc(sigma= Sig, posterior= LLH, data= NC, steps = 4000, target = 0.2, startValue = c(runif(1),runif(1)))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DeconRNASeq")
library(utils)
rforge <- "http://r-forge.r-project.org"
install.packages("estimate", repos=rforge, dependencies=TRUE)
library(estimate)
help(package="estimate")
estimate??
11
??estimate
###################################################
op.orig <-
options(SweaveHooks=
list(fig=function() par(mar=c(5.1, 4.1, 1.1, 2.1))),
width = 75,
digits = 5,
prompt = "R> ")
###################################################
library("pcalg")
data("gmG")
install.packages("pcalg")
###################################################
library("pcalg")
data("gmG")
###################################################
suffStat <- list(C = cor(gmG$x), n = nrow(gmG$x))
pc.fit <- pc(suffStat, indepTest = gaussCItest,
p = ncol(gmG$x), alpha = 0.01)
library("Rgraphviz")
par(mfrow = c(1,2))
plot(gmG$g, main = "")
plot(pc.fit, main = "")
###################################################
ida(1, 6, cov(gmG$x), pc.fit@graph)
###################################################
idaFast(1, c(4,5,6), cov(gmG$x), pc.fit@graph)
###################################################
suffStat <- list(C = cor(gmG$x), n = nrow(gmG$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest, p = ncol(gmG$x), alpha = 0.01)
par(mfrow = c(1,2))
plot(gmG$g, main = "")
plot(pc.fit, main = "")
###################################################
data("gmD")
suffStat <- list(dm = gmD$x, nlev = c(3,2,3,4,2), adaptDF = FALSE)
skel.fit <- skeleton(suffStat, indepTest = disCItest,
p = ncol(gmD$x), alpha = 0.01)
par(mfrow = c(1,2))
plot(gmD$g, main = "")
plot(skel.fit, main = "")
###################################################
data("gmL")
suffStat1 <- list(C = cor(gmL$x), n = nrow(gmL$x))
pag.est <- fci(suffStat1, indepTest = gaussCItest,
p = ncol(gmL$x), alpha = 0.01, labels = as.character(2:5))
par(mfrow = c(1,2))
plot(gmL$g, main = "")
plot(pag.est)
###################################################
data("gmI")
suffStat <- list(C = cor(gmI$x), n = nrow(gmI$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest,
p = ncol(gmI$x), alpha = 0.01)
###################################################
par(mfrow = c(1,2))
plot(gmI$g, main = "")
plot(pc.fit, main = "")
###################################################
am.pdag <- wgtMatrix(pc.fit@graph)
ad <- allDags(am.pdag, am.pdag, NULL)
gDag <- vector("list", nrow(ad))
for (i in 1:nrow(ad)) gDag[[i]] <- as(matrix(ad[i, ], 7, 7), "graphNEL")
par(mfrow = c(3,2))
for (i in 1:6) plot(gDag[[i]], main = paste("DAG",i))
###################################################
sfsmisc::mult.fig(6)
for (i in 1:6) plot(gDag[[i]], main = paste("DAG",i))
###################################################
ida(2, 5, cov(gmI$x), pc.fit@graph, method = "global", verbose = FALSE)
###################################################
ida(2,5, cov(gmI$x), pc.fit@graph, method = "local")
###################################################
suffStat <- list(C = cor(gmI$x), n = nrow(gmI$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest, p=ncol(gmI$x), alpha = 0.01)
(eff.est1 <- ida(2,5, cov(gmI$x), pc.fit@graph, method="local"))
(eff.est2 <- ida(2,6, cov(gmI$x), pc.fit@graph, method="local"))
(eff.est3 <- ida(2,7, cov(gmI$x), pc.fit@graph, method="local"))
(eff.estF <- idaFast(2, c(5,6,7), cov(gmI$x), pc.fit@graph))
###################################################
myCItest <- function(x,y,S, suffStat) {
if (length(S) == 0) {
x. <- suffStat[,x]
y. <- suffStat[,y]
} else {
rxy <- resid(lm.fit(y= suffStat[,c(x,y)], x= cbind(1, suffStat[,S])))
x. <- rxy[,1];  y. <- rxy[,2]
}
cor.test(x., y.)$p.value
}
###################################################
suffStat <- list(C = cor(gmG$x), n = 5000)
pc.fit <- pc(suffStat, indepTest=gaussCItest, p = 8, alpha = 0.01)
###################################################
pc.myfit <- pc(suffStat = gmG$x, indepTest = myCItest,
p = 8, alpha = 0.01)
par(mfrow = c(1,2))
plot(pc.fit, main = "")
plot(pc.myfit, main = "")
###################################################
toLatex(sessionInfo())
###################################################
options(op.orig)
?estimate
estimate
ESTIMATE
ESTIMATE
showMethods(ESTIMATE)
library(help="estimate")
estimate
estimate
estimate
estimate
estimateScore
estimate
estimate::common_genes
estimate()
devtools::install_github('BioInforCore-BCI/Decosus')
is(c("C", "D"), c("matrix", "data.frame"))
# dmarks = discretize(marks, breaks = 2, method = "interval")
# bn.dgs = gs(dmarks)
# bn.dhc = hc(dmarks)
rm(list = ls())
debugSource('G:/My Drive/Cancer Center PC/BayesNetwork-20201007/Source Code Structure learning_gs.R', echo=TRUE)
debugSource('G:/My Drive/Cancer Center PC/BayesNetwork-20201007/Source Code Structure learning_gs.R', echo=TRUE)
data(learning.test)
data(learning.test)
data(learning.test)
debugSource('G:/My Drive/Cancer Center PC/BayesNetwork-20201007/Source Code Structure learning_gs.R', echo=TRUE)
data(learning.test)
debugSource('G:/My Drive/Cancer Center PC/BayesNetwork-20201007/Source Code Structure learning_gs.R', echo=TRUE)
shiny::runApp('G:/My Drive/Cancer Center PC/Network-code - (BackUp. 5.19.2023)/Shinny App_NB')
runApp('G:/My Drive/Cancer Center PC/Network-code - (BackUp. 5.19.2023)/Shinny App_NB')
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.18.2023)")
library(shiny); runApp('app (Cycle_Perfect_deploy).R')
runApp('app (Cycle_Perfect_deploy)_PROGRESS.R')
runApp('app (Cycle_Perfect_deploy)_PROGRESS.R')
runApp('app (Error).R')
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023")
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
as.name("col1")
as.name("'col1'")
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
col1= "Cancer"
evidence_str1 <- paste0(col1, " > 0.95")
evidence_str2 <- paste0(col1, " < 0.05")
# Step 2: Convert the string to an expression
evidence_expr1 <- parse(text = evidence_str1)
evidence_expr2 <- parse(text = evidence_str2)
print(evidence_expr1)
print(evidence_expr2)
# Step 2: Convert the string to an expression
evidence_expr1 <- parse(evidence_str1)
evidence_expr2 <- parse(evidence_str2)
print(evidence_expr1)
col1= "Cancer"
evidence_str1 <- paste0(col1, " > 0.95")
evidence_str2 <- paste0(col1, " < 0.05")
# Step 2: Convert the string to an expression
evidence_expr1 <- parse(evidence_str1)
# Step 2: Convert the string to an expression
evidence_expr1 <- parse(text = evidence_str1)
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error).R')
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp()
runApp()
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
library(shiny); runApp('app (Error)_v2.R')
library(rsconnect)
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='37FE5FEBDC4E3DBDE461073CD27F0917', secret='2T6k12d+0Fxqa9Cx44jls2scRDeX3cSWsbDTOC3Z')
rsconnect::deployApp()
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
library(rsconnect)
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='37FE5FEBDC4E3DBDE461073CD27F0917', secret='2T6k12d+0Fxqa9Cx44jls2scRDeX3cSWsbDTOC3Z')
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='37FE5FEBDC4E3DBDE461073CD27F0917', secret='2T6k12d+0Fxqa9Cx44jls2scRDeX3cSWsbDTOC3Z')
rsconnect::deployApp()
library(rsconnect)
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='4EFC72CD387880BCDBEE10DEDB07A0F4', secret='Fc6uH0PCS6DHcLML4gLkZFupqlih59FtytvwBvAu')
rsconnect::deployApp(account = "theklinkelab-cellnetwork-habiblatifi")
devtool::install_github('rstudio/shinyapps')
sudo apt-get install r-cran-xml
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
devtools::install_github('rstudio/shinyapps')
library(rsconnect)
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='4EFC72CD387880BCDBEE10DEDB07A0F4', secret='Fc6uH0PCS6DHcLML4gLkZFupqlih59FtytvwBvAu')
library(rsconnect)
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
rsconnect::deployApp()
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
rsconnect::setAccountInfo(name='theklinkelab-cellnetwork-habiblatifi', token='4EFC72CD387880BCDBEE10DEDB07A0F4', secret='Fc6uH0PCS6DHcLML4gLkZFupqlih59FtytvwBvAu')
library(rsconnect)
rsconnect::deployApp()
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023")
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
runApp('app (Error)_v2.R')
runApp('G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.18.2023)/app (Cycle_Perfect_deploy)_PROGRESS.R')
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/Shiny_minimal_10.21.2023/ShinyApps.iso")
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp('app (Error)_v2.R')
runApp('G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.18.2023)/app (Cycle_Perfect_deploy)_PROGRESS.R')
runApp('G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.18.2023)/app (Cycle_Perfect_deploy)_PROGRESS.R')
runApp('G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.18.2023)/app (Cycle_Perfect_deploy)_PROGRESS.R')
setwd("G:/My Drive/Cancer Center PC/Shiny app(10.08.2023)/BaMANI_Shiny(10.25.2023)")
library(shiny); runApp('app (Cycle_Perfect_deploy)_PROGRESS_important_3.R')
